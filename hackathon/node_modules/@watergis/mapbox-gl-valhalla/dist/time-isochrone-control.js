"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const valhalla_1 = require("./valhalla");
const crosshair_manager_1 = require("./crosshair-manager");
const util_1 = require("./util");
class TimeIsochroneControl {
    constructor(map, valhalla) {
        this.map = map;
        this.valhalla = valhalla;
        this.onDocumentClick = this.onDocumentClick.bind(this);
    }
    addTo(parentContainer) {
        var _a, _b;
        if (!this.map)
            console.error('map object is null');
        this.controlContainer = document.createElement('div');
        this.controlContainer.classList.add('mapboxgl-ctrl');
        this.controlContainer.classList.add('mapboxgl-ctrl-group');
        this.mainContainer = document.createElement('div');
        this.mainContainer.classList.add('mapboxgl-valhalla-list');
        this.mainButton = document.createElement('button');
        this.mainButton.classList.add('mapboxgl-ctrl-icon');
        this.mainButton.classList.add('mapboxgl-valhalla-time-isochrone-control');
        this.mainButton.addEventListener('click', () => {
            this.mainButton.style.display = 'none';
            this.mainContainer.style.display = 'block';
            this.toggleCrosshair(true);
        });
        document.addEventListener('click', this.onDocumentClick);
        this.controlContainer.appendChild(this.mainButton);
        this.controlContainer.appendChild(this.mainContainer);
        const table = document.createElement('TABLE');
        table.className = 'valhalla-table';
        this.mainContainer.appendChild(table);
        const tr1 = util_1.createSelection(valhalla_1.Costing, 'Means of transport', 'costing', valhalla_1.Costing.Walking, (data, key) => data[key]);
        table.appendChild(tr1);
        const center = (_a = this.map) === null || _a === void 0 ? void 0 : _a.getCenter();
        if (center) {
            const tr2 = util_1.createTextbox('Longitude', 'lon-time', center.lng, true);
            table.appendChild(tr2);
            const tr3 = util_1.createTextbox('Latitude', 'lat-time', center.lat, true);
            table.appendChild(tr3);
        }
        const contoursOption = this.valhalla.getContoursOption();
        for (let i = 0; i < contoursOption.length; i += 1) {
            const contour = contoursOption[i];
            const trN = util_1.createTextbox(`Contour ${i + 1} (min)`, `contour-time-${i}`, contour.time, false, 'number');
            table.appendChild(trN);
        }
        const clearButton = document.createElement('button');
        clearButton.textContent = 'Clear';
        clearButton.classList.add('mapbox-valhalla-control-button');
        clearButton.addEventListener('click', () => {
            this.valhalla.clearFeatures();
        });
        this.mainContainer.appendChild(clearButton);
        const calcButton = document.createElement('button');
        calcButton.textContent = 'Calculate';
        calcButton.classList.add('mapbox-valhalla-control-button');
        calcButton.addEventListener('click', () => {
            const lon = document.getElementById('mapbox-gl-valhalla-lon-time');
            const lat = document.getElementById('mapbox-gl-valhalla-lat-time');
            const costing = document.getElementById('mapbox-gl-valhalla-costing');
            const options = this.valhalla.getContoursOption();
            for (let i = 0; i < options.length; i += 1) {
                const contour = options[i];
                const contourText = document.getElementById(`mapbox-gl-valhalla-contour-time-${i}`);
                contour.time = Number(contourText.value);
            }
            this.valhalla.getIsochrone(Number(lon.value), Number(lat.value), valhalla_1.ContourType.Time, costing.value, options);
        });
        this.mainContainer.appendChild(calcButton);
        (_b = this.map) === null || _b === void 0 ? void 0 : _b.on('moveend', () => {
            var _a;
            const centerMoved = (_a = this.map) === null || _a === void 0 ? void 0 : _a.getCenter();
            const lon = document.getElementById('mapbox-gl-valhalla-lon-time');
            const lat = document.getElementById('mapbox-gl-valhalla-lat-time');
            if (!centerMoved) {
                lon.setAttribute('value', '');
                lat.setAttribute('value', '');
            }
            const lnglat = centerMoved;
            const lonValue = (lnglat === null || lnglat === void 0 ? void 0 : lnglat.lng) ? lnglat.lng.toString() : '';
            lon.setAttribute('value', lonValue);
            const latValue = (lnglat === null || lnglat === void 0 ? void 0 : lnglat.lat) ? lnglat.lat.toString() : '';
            lat.setAttribute('value', latValue);
        });
        parentContainer.appendChild(this.controlContainer);
        return parentContainer;
    }
    onDocumentClick(event) {
        if (this.controlContainer
            && !this.controlContainer.contains(event.target)) {
            this.hide();
        }
    }
    hide() {
        if (this.mainContainer
            && this.mainButton) {
            this.mainContainer.style.display = 'none';
            this.mainButton.style.display = 'block';
            this.toggleCrosshair(false);
        }
    }
    destroy() {
        if (!this.mainContainer
            || !this.mainContainer.parentNode
            || !this.map
            || !this.mainButton) {
            return;
        }
        this.mainButton.removeEventListener('click', this.onDocumentClick);
        this.mainContainer.parentNode.removeChild(this.mainContainer);
        document.removeEventListener('click', this.onDocumentClick);
        if (this.crosshair !== undefined) {
            this.crosshair.destroy();
            this.crosshair = undefined;
        }
        this.map = undefined;
    }
    toggleCrosshair(state) {
        if (state === false) {
            if (this.crosshair !== undefined) {
                this.crosshair.destroy();
                this.crosshair = undefined;
            }
        }
        else {
            this.crosshair = new crosshair_manager_1.default(this.map);
            this.crosshair.create();
        }
    }
}
exports.default = TimeIsochroneControl;
//# sourceMappingURL=time-isochrone-control.js.map