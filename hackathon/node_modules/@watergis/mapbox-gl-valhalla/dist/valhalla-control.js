"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const time_isochrone_control_1 = require("./time-isochrone-control");
const distance_isochrone_control_1 = require("./distance-isochrone-control");
const valhalla_1 = require("./valhalla");
class MapboxValhallaControl {
    constructor(url, options) {
        this.options = {
            Contours: [
                {
                    time: 5,
                    distance: 1,
                    color: 'ff0000',
                },
                {
                    time: 10,
                    distance: 3,
                    color: 'ffff00',
                },
                {
                    time: 15,
                    distance: 5,
                    color: '0000ff',
                },
            ],
        };
        this.url = url;
        if (options) {
            this.options = Object.assign(this.options, options);
        }
        this.onDocumentClick = this.onDocumentClick.bind(this);
    }
    getDefaultPosition() {
        const defaultPosition = 'top-right';
        return defaultPosition;
    }
    onAdd(map) {
        this.map = map;
        if (this.map) {
            this.valhalla = new valhalla_1.default(this.map, this.url, this.options.Contours);
        }
        this.controlContainer = document.createElement('div');
        this.timeIsochroneControl = new time_isochrone_control_1.default(this.map, this.valhalla);
        this.controlContainer = this.timeIsochroneControl.addTo(this.controlContainer);
        this.distanceIsochroneControl = new distance_isochrone_control_1.default(this.map, this.valhalla);
        this.controlContainer = this.distanceIsochroneControl.addTo(this.controlContainer);
        document.addEventListener('click', this.onDocumentClick);
        return this.controlContainer;
    }
    onDocumentClick(event) {
        if (this.controlContainer
            && !this.controlContainer.contains(event.target)
            && this.timeIsochroneControl
            && this.distanceIsochroneControl) {
            this.timeIsochroneControl.hide();
            this.distanceIsochroneControl.hide();
        }
    }
    onRemove() {
        if (!this.controlContainer
            || !this.controlContainer.parentNode
            || !this.map
            || !this.timeIsochroneControl
            || !this.distanceIsochroneControl) {
            return;
        }
        this.timeIsochroneControl.destroy();
        this.distanceIsochroneControl.destroy();
        this.controlContainer.parentNode.removeChild(this.controlContainer);
        document.removeEventListener('click', this.onDocumentClick);
        this.map = undefined;
    }
}
exports.default = MapboxValhallaControl;
//# sourceMappingURL=valhalla-control.js.map